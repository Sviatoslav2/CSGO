import os

class ConfigPath:
    def __init__(self, path_LabelEncoder="LabelEncoder.pickle",
                       path_Scaler="Scaler.pickle",
                       path_model="model.pickle",
                       columns=['ct_score',
 't_score',
 'ct_players_alive',
 't_players_alive',
 'ct_equipment_value_sum',
 't_equipment_value_sum',
 'ct_health_sum',
 't_health_sum',
 'ct_armors',
 't_armors',
 'ct_helmets',
 't_helmets',
 'ct_defuse_kits',
 't_c4s',
 'ct_flashbangs',
 't_flashbangs',
 'ct_smokes',
 't_smokes',
 'ct_hes',
 't_molotovs',
 'ct_glock_18s',
 't_glock_18s',
 'ct_usp_ss',
 't_usp_ss',
 'ct_p2000s',
 't_p2000s',
 'ct_p250s',
 't_p250s',
 'ct_dual_berettas',
 't_dual_berettas',
 'ct_p90s',
 't_p90s',
 'ct_mp5_sds',
 't_mp5_sds',
 'ct_mp7s',
 't_mp7s',
 'ct_pp_bizons',
 't_pp_bizons',
 'ct_mp9s',
 't_mp9s',
 'ct_ump_45s',
 't_ump_45s',
 'ct_mac_10s',
 't_mac_10s',
 'ct_augs',
 't_augs',
 'ct_m4a4s',
 't_m4a4s',
 'ct_sg_553s',
 't_sg_553s',
 'ct_m4a1s',
 't_m4a1s',
 'ct_ak_47s',
 't_ak_47s',
 'ct_famases',
 't_famases',
 'ct_galil_ars',
 't_galil_ars',
 'ct_g3sg1s',
 't_g3sg1s',
 'ct_scar_20s',
 't_scar_20s',
 'ct_awps',
 't_awps',
 'ct_ssg_08s',
 't_ssg_08s',
 'ct_m249s',
 't_m249s',
 'ct_negevs',
 't_negevs',
 'ct_xm1014s',
 't_xm1014s',
 'ct_mag_7s',
 't_mag_7s',
 'ct_sawed_offs',
 't_sawed_offs',
 'ct_novas',
 't_novas',
 'ct_zeus_x27s',
 't_zeus_x27s',
 'created_at',
 'updated_at',
 'map_name',
 'is_bomb_planted',
 'ct_molotovs',
 't_hes',
 'ct_cz75_autos',
 't_cz75_autos',
 'ct_five_sevens',
 't_five_sevens',
 'ct_tec_9s',
 't_tec_9s',
 'ct_r8_revolvers',
 't_r8_revolvers',
 'ct_desert_eagles',
 't_desert_eagles',
 'round_time_remaining'],
                       target='winner_side', 
                       clean_data=False):
        self.parent_path = os.path.dirname(os.path.abspath('__file__'))
        
        self.path_to_scaleres = os.path.join(self.parent_path, "scaleres")
        self.path_to_models  = os.path.join(self.parent_path, "model")
        self.path_to_data = os.path.join(self.parent_path, "data")
        
        self.path_LabelEncoder = os.path.join(self.path_to_scaleres, path_LabelEncoder)
        self.path_Scaler = os.path.join(self.path_to_scaleres, path_Scaler)
        self.path_model = os.path.join(self.path_to_models, path_model)
        
        self.list_of_columns = columns
        self.target = target
        self.clean_data = clean_data
    
    def __new__(cls):
        if not hasattr(cls, 'instance'):
            cls.instance = super(ConfigPath, cls).__new__(cls)
        return cls.instance